"""
Course  : CMPSC 131, Fall 2024
File    : final_project.py 
Name    : Kaelan Liu

GitHub User:   miyoku1226

Collaboration Statement: I worked on this assignment by myself, using only course materials.
"""

# Error code constants
ERROR_DUPLICATE_USER = 0
ERROR_FAILED_AUTHENTICATION = 1
ERROR_FRIEND_ALREADY_FOUND = 2
ERROR_FRIEND_NOT_FOUND = 3
ERROR_USER_NOT_FOUND = 4
ERROR_MESSAGE = {ERROR_DUPLICATE_USER: "ERROR: found duplicate user.", 
                ERROR_FAILED_AUTHENTICATION: "ERROR: authentication failed.", 
                ERROR_FRIEND_ALREADY_FOUND: "ERROR: friendship already exists.", 
                ERROR_FRIEND_NOT_FOUND: "ERROR: friendship does not exist.", 
                ERROR_USER_NOT_FOUND: "ERROR: user does not exist in the social network."}
    

def error_to_string(error_code: int) -> str:
    """
        Provides a descriptive error message

        Args:
            error_code (int): error code generated by a function
        
        Returns:
            (str) Explanation of the error code
    """
    if error_code in ERROR_MESSAGE:
        return ERROR_MESSAGE[error_code]
    else:
        return "INVALID ERROR CODE"

################################################################################

import random

def generate_key() -> int:
    """
    Generates a fixed Caesar cipher key using a fixed seed.

    Returns:
        int: The fixed key value (11).
    """
    random.seed(131)
    return 11

def encrypt_password(password: str) -> str:
    """
    Encrypts a password using a Caesar cipher with a fixed key.
    Each character is shifted within the ASCII range 33-126.
    If the shift exceeds 126, it wraps around to start from 33.

    Args:
        password (str): The plain text password to encrypt.

    Returns:
        str: The encrypted password.
    """
    key = generate_key()
    encrypted_password = ""
    for char in password:
        ascii_val = ord(char)
        shifted_val = ascii_val + key
        if shifted_val > 126:
            shifted_val = 32 + (shifted_val - 126)
        encrypted_char = chr(shifted_val)
        encrypted_password += encrypted_char
    return encrypted_password

def string_to_user(user_string: str) -> tuple:
    """
    Converts a formatted user string into a username and a dictionary of user information.

    Args:
        user_string (str): The formatted string representing a user.

    Returns:
        tuple: A tuple containing the username and a dictionary with encrypted password, bio, country, and friends list.
    """
    parts = user_string.split('|')
    main_info = parts[0].strip()
    friends_info = parts[1].strip() if len(parts) > 1 else ""

    main_parts = main_info.split(',')
    username = main_parts[0].strip()
    password = main_parts[1].strip()
    bio = main_parts[2].strip()
    country = main_parts[3].strip()

    friends_list = []
    if friends_info:
        friends_split = friends_info.split(',')
        for friend in friends_split:
            friend = friend.strip()
            if friend:
                friends_list.append(friend)

    encrypted_password = encrypt_password(password)

    user_info = {
        'password': encrypted_password,
        'bio': bio,
        'country': country,
        'friends': friends_list
    }

    return (username, user_info)

def initialize_social_network_from_file(file_name: str):
    """
    Initializes the social network by reading user data from a file.

    Args:
        file_name (str): The path to the file containing user data.

    Returns:
        dict | int: A dictionary representing the social network or an error code if duplicates are found.
    """
    social_network = {}
    file = open(file_name, 'r')
    for line in file:
        line = line.strip()
        if line != '':
            username, user_info = string_to_user(line)
            if username in social_network:
                file.close()
                return ERROR_DUPLICATE_USER
            social_network[username] = user_info
    file.close()
    return social_network

def authenticate_user(username: str, password: str, social_network: dict) -> bool:
    """
    Authenticates a user by verifying the username and password.

    Args:
        username (str): The username of the user.
        password (str): The plain text password of the user.
        social_network (dict): The social network dictionary.

    Returns:
        bools: True if authentication is successful, False otherwise.
    """
    if username not in social_network:
        return False
    encrypted_attempt = encrypt_password(password)
    stored_password = social_network[username]['password']
    return encrypted_attempt == stored_password

def get_friend_index(username: str, friend_username: str, social_network: dict) -> int:
    """
    Retrieves the index of a friend in a user's friend list.

    Args:
        username (str): The username of the user.
        friend_username (str): The username of the friend.
        social_network (dict): The social network dictionary.

    Returns:
        int: The index of the friend if found, -1 otherwise.
    """
    if username not in social_network:
        return -1
    friends_list = social_network[username]['friends']
    index = 0
    for friend in friends_list:
        if friend == friend_username:
            return index
        index += 1
    return -1

def add_friend(username: str, password: str, friend_username: str, social_network: dict) -> int | None:
    """
    Adds a mutual friendship between two users.

    Args:
        username (str): The username of the user adding a friend.
        password (str): The plain text password of the user.
        friend_username (str): The username of the friend to add.
        social_network (dict): The social network dictionary.

    Returns:
        int | None: An error code if an error occurs, or None if the operation is successful.
    """
    if not authenticate_user(username, password, social_network):
        return ERROR_FAILED_AUTHENTICATION
    
    if username == friend_username:
        return None
    
    if friend_username not in social_network:
        return ERROR_USER_NOT_FOUND
    
    if get_friend_index(username, friend_username, social_network) != -1:
        return ERROR_FRIEND_ALREADY_FOUND
    
    social_network[username]['friends'].append(friend_username)
    social_network[friend_username]['friends'].append(username)
    return None

def remove_friend(username: str, password: str, friend_username: str, social_network: dict) -> int | None:
    """
    Removes a mutual friendship between two users.

    Args:
        username (str): The username of the user adding a friend.
        password (str): The plain text password of the user.
        friend_username (str): The username of the friend to add.
        social_network (dict): The social network dictionary.

    Returns:
        int | None: An error code if an error occurs, or None if the operation is successful.
    """
    if not authenticate_user(username, password, social_network):
        return ERROR_FAILED_AUTHENTICATION
    
    friend_index = get_friend_index(username, friend_username, social_network)
    if friend_index == -1:
        return ERROR_FRIEND_NOT_FOUND
    
    social_network[username]['friends'].pop(friend_index)
    reverse_index = get_friend_index(friend_username, username, social_network)
    if reverse_index != -1:
        social_network[friend_username]['friends'].pop(reverse_index)
    return None

def num_countries_in_friends(username: str, password: str, social_network: dict) -> dict | int:
    """
    Counts the number of friends from each country in a user's friend list.

    Args:
        username (str): The username of the user:
        password (str): The plain text password of the user.
        social_network (dict): The social network dictionary.

    Returns:
        dict | int: A dictionary with countries as keys and counts as values, or an error code if authentication fails. 
    """
    if not authenticate_user(username, password, social_network):
        return ERROR_FAILED_AUTHENTICATION
    
    country_count = {}
    friends_list = social_network[username]['friends']
    index = 0
    while index < len(friends_list):
        friend = friends_list[index]
        friend_country = social_network[friend]['country']
        if friend_country in country_count:
            country_count[friend_country] += 1
        else:
            country_count[friend_country] = 1
        index += 1
    return country_count

def mutual_friends_count(user1: str, user2: str, social_network: dict) -> int:
    """
    Counts the number of mutual friends between two users.

    Args:
        user1 (str): The first user's username.
        user2 (str): The second user's username.

    Returns:
        int: The number of mutual friends.
    """
    count = 0
    index1 = 0
    while index1 < len(social_network[user1]['friends']):
        friend = social_network[user1]['friends'][index1]
        index2 = 0
        while index2 < len(social_network[user2]['friends']):
            if friend == social_network[user2]['friends'][index2]:
                count += 1
            index2 += 1
        index1 += 1
    return count

def sort_friend_list(username: str, password: str, social_network: dict) -> int | None:
    """
    Sorts a user's friend list in-place based on the number of mutual friends in descending order.
    Uses a bubble sort algorithm.

    Args:
        username (str): The username of the user.
        password (str): The plain text password of the user.
        social_network (dict): The social network dictionary.

    Returns:
        int | None: An error code if authentication fails, or None if the operation is successful.
    """
    if not authenticate_user(username, password, social_network):
        return ERROR_FAILED_AUTHENTICATION
    friends_list = social_network[username]['friends']
    n = len(friends_list)
    i = 0
    while i < n - 1:
        j = 0
        while j < n - i - 1:
            count_j = mutual_friends_count(username, friends_list[j], social_network)
            count_j1 = mutual_friends_count(username, friends_list[j + 1], social_network)
            if count_j < count_j1:
                temp = friends_list[j]
                friends_list[j] = friends_list[j + 1]
                friends_list[j + 1] = temp
            j += 1
        i += 1
    return None

def get_level_friends(username: str, password: str, social_network: dict, level: int) -> list | int:
    """
    Retrieves friends at a specified friendship level from a user.

    Args:
        username (str): The username of the user.
        password (str): The plain text password of the user.
        social_network (dict): The social network dictionary.
        level (int): The friendship level to retrieve.

    Returns:
        list | int: A list of friends at the specified level, or an error code if authentication fails.
    """
    if not authenticate_user(username, password, social_network):
        return ERROR_FAILED_AUTHENTICATION
    if level < 0:
        return[]
    if level == 0:
        return [username]
    
    visited = []
    current_level = 0
    current_friends = [username]
    while current_level < level:
        next_level_friends = []
        index = 0
        while index < len(current_friends):
            current_user = current_friends[index]
            friends_of_current = social_network[current_user]['friends']
            friend_idx = 0
            while friend_idx < len(friends_of_current):
                friend = friends_of_current[friend_idx]
                if friend not in visited and friend != username:
                    next_level_friends.append(friend)
                    visited.append(friend)
                friend_idx += 1
            index += 1
        current_friends = next_level_friends
        current_level += 1
    return current_friends

#- YOUR CODE ENDS HERE 
################################################################################

def social_network_application() -> None:
    """
        Social Network Interface for testing integration from all helper functions only
    """
    user_file_path = input("Enter users file path: ")
    
    # Initialize social network
    social_network = initialize_social_network_from_file(user_file_path)
    if (type(social_network) == int):
        print(error_to_string(social_network))
    
    # Flag to keep track of login status
    user_logged_in = False
    print("Welcome to the CMPSC 131 Social Network!")
    
    # Main loop for user logged in
    while not user_logged_in:
        
        # Login credentials input
        print("Please enter your login credentials:")
        username = input("Username: ")
        password = input("Password: ")
        
        # Authenticate the user.
        user_logged_in = authenticate_user(username, password, social_network)

        if not user_logged_in:
            print("Authentication failed. Incorrect username or password.")
        else:
            print("Login Successful")
            display_menu = True
            
            # Loop for the menu. If user is logged in, they can view the menu infinitely until they log out or exit the program.
            while display_menu:
                print("\n\nPlease select from the menu: ")
                print("1. Add Friend")    
                print("2. Remove Friend")
                print("3. Display Friend List (Sorted)")
                print("4. Display nth Level Friends")
                print("5. Display countries in your network")
                print("6. Log Out")
                print("7. Display menu")
                menu_option = input("Selection: ")


                if menu_option == '1':
                    friend_username = input("Friend Username: ")
                    ret = add_friend(username, password, friend_username, social_network)
                    if ret is None:
                        sort_friend_list(username, password, social_network)
                        print(f"Updated Friend List: {social_network[username]['friends']}")
                    else:
                        print(error_to_string(ret))
                elif menu_option == '2':
                    friend_username = input("Friend Username: ")
                    ret = remove_friend(username, password, friend_username, social_network)
                    if ret is None:
                        sort_friend_list(username, password, social_network)
                        print(f"Updated Friend List: {social_network[username]['friends']}")
                    else:
                        print(error_to_string(ret))
                elif menu_option == '3':
                    sort_friend_list(username, password, social_network)
                    print(f"Updated Friend List: {social_network[username]['friends']}")
                elif menu_option == '4':
                    level = int(input("Enter friendship level (1,2,3, etc.): "))
                    print(f"Your friends at level {level} are {get_level_friends(username, password, social_network, level)}")
                elif menu_option == '5':
                    print(f"Users per country in {username}'s network: \n {num_countries_in_friends(username, password, social_network)}")
                elif menu_option == '6':
                    # Exit display menu loop
                    display_menu = False
                    # Trigger the re-execution of the login loop
                    user_logged_in = False
                elif menu_option == '7':
                    print("Returning to main menu...")
                else:
                    print("Invalid Option. Returning to main menu...")
            
            print("Logging out...")

def main() -> None:
    social_network_application()
    

if __name__ == "__main__":
    main()
